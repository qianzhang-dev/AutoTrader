openapi: 3.0.0
info:
  title: AutoTrader
  termsOfService: https://github.com/qianzhang-dev/AutoTrader
  contact:
    name: DinasourFaFaFa
    url: DinasourFaFaFa
  license:
    name: MIT
  version: 1.1.0
servers:
- url: http://localhost:3000
paths:
  /users/{userId}:
    get:
      tags: []
      summary: Get User Info by User ID
      description: Retrieve the information of the user with the matching user ID.
      operationId: get_users_user_id
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    delete:
      operationId: delete_users_user_id
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    patch:
      summary: Update User Information
      operationId: patch_users_user_id
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "409":
          description: Conflict
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /user:
    post:
      summary: Create New User
      description: Create a new user.
      operationId: post_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: Bad Request
        "409":
          description: Conflict
      security: []
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{userId}/alerts:
    get:
      tags: []
      summary: Get all alerts bound to a user
      description: Get a list of alert that the user owns
      operationId: get_users_user_id_alerts
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertResponse'
                x-content-type: application/json
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{userId}/alerts/{ticker}:
    get:
      tags: []
      summary: Get alerts bound to user matches the ticker
      description: Get the alert of a specific ticker for a user
      operationId: get_users_user_id_alerts_ticker
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: ticker
        in: path
        description: The ticker of alerts to be specified
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertResponse'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{userId}/alert:
    post:
      summary: Create an alert with expected rules
      description: Create a new alert for a specific ticker on a specific event
      operationId: post_users_user_id_alert
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertRequest'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "409":
          description: Conflict
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{userId}/alerts/{ticker}/{alertId}:
    get:
      tags: []
      summary: Get a specific alert by id
      operationId: get_users_user_id_alerts_ticker_alert_id
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: ticker
        in: path
        description: The ticker of alerts to be specified
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: alertId
        in: path
        description: Id of an existing alert
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertResponse'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    delete:
      operationId: delete_users_user_id_alerts_ticker_alert_id
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: ticker
        in: path
        description: The ticker of alerts to be specified
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: alertId
        in: path
        description: Id of an existing alert
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
      x-openapi-router-controller: swagger_server.controllers.default_controller
    patch:
      operationId: patch_users_user_id_alerts_ticker_alert_id
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: ticker
        in: path
        description: The ticker of alerts to be specified
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: alertId
        in: path
        description: Id of an existing alert
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertResponse'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /ping:
    get:
      tags: []
      summary: Healthcheck Endpoint
      description: Healthcheck endpoint of the current site
      operationId: get_ping
      responses:
        "200":
          description: OK
      security: []
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /login:
    post:
      operationId: post_login
      parameters: []
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "401":
          description: Unauthorized
      security: []
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{userId}/monitor:
    post:
      operationId: post_users_user_id_monitor
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitorRequest'
      responses:
        "200":
          description: OK
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorResponse'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{userId}/monitors?filter={eventType}:
    get:
      tags: []
      summary: Your GET endpoint
      operationId: get_users_user_id_monitors
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: eventType
        in: path
        description: The list of eventTypes (e.g. upCross50MA,downCross100MA)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MonitorResponse'
                x-content-type: application/json
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{userId}/monitors/{monitorId}:
    get:
      tags: []
      summary: Your GET endpoint
      operationId: get_users_user_id_monitors_monitor_id
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: monitorId
        in: path
        description: Id of the registered monitor
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorResponse'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    delete:
      operationId: delete_users_user_id_monitors_monitor_id
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: monitorId
        in: path
        description: Id of the registered monitor
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    patch:
      operationId: patch_users_user_id_monitors_monitor_id
      parameters:
      - name: userId
        in: path
        description: Id of an existing user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: monitorId
        in: path
        description: Id of the registered monitor
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorResponse'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    UserResponse:
      title: UserResponse
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          example: 1
        username:
          type: string
          description: The username of the user
          example: rogerxman
        email:
          type: string
          format: email
          example: roger@xman.com
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createdDate:
          type: string
          description: The date that the user was created.
          format: date-time
        lastLoggedInDate:
          type: string
          format: date-time
      example:
        emailVerified: true
        createdDate: 2000-01-23T04:56:07.000+00:00
        lastLoggedInDate: 2000-01-23T04:56:07.000+00:00
        id: 1
        email: roger@xman.com
        username: rogerxman
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: 1997-10-31
          emailVerified: true
          signUpDate: 2019-08-24
    AlertResponse:
      title: AlertResponse
      type: object
      properties:
        id:
          type: integer
        eventType:
          type: string
          example: upCross
          enum:
          - upCross
          - downCross
        ticker:
          type: string
          example: MSFT
        disabled:
          type: boolean
        createdTime:
          type: string
          format: date-time
        lastTriggeredTime:
          type: string
          format: date-time
        ownerId:
          type: integer
        price:
          type: number
      example:
        ticker: MSFT
        lastTriggeredTime: 2000-01-23T04:56:07.000+00:00
        price: 1.4658129805029452
        createdTime: 2000-01-23T04:56:07.000+00:00
        disabled: true
        id: 0
        eventType: upCross
        ownerId: 6
    UserRequest:
      title: UserRequest
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        email:
          type: string
          format: email
    AlertRequest:
      title: AlertRequest
      required:
      - eventType
      - price
      - ticker
      type: object
      properties:
        ticker:
          type: string
        eventType:
          type: string
          enum:
          - upCross
          - downCross
        price:
          type: number
    MonitorRequest:
      title: MonitorRequest
      required:
      - eventType
      - ticker
      type: object
      properties:
        ticker:
          type: string
        eventType:
          type: string
          enum:
          - downCross50MA
          - upCross50MA
          - downCross100MA
          - upCross100MA
          - downCross10MA
          - upCross10MA
          - downCross200MA
          - upCross200MA
    MonitorResponse:
      title: MonitorResponse
      type: object
      properties:
        id:
          type: string
        eventType:
          type: string
        ticker:
          type: string
        createdDate:
          type: string
          format: date-time
        lastTriggeredDate:
          type: string
          format: date-time
      example:
        ticker: ticker
        createdDate: 2000-01-23T04:56:07.000+00:00
        id: id
        eventType: eventType
        lastTriggeredDate: 2000-01-23T04:56:07.000+00:00
  securitySchemes:
    basic_authorization:
      type: http
      scheme: basic
      x-basicInfoFunc: swagger_server.controllers.authorization_controller.check_basic_authorization

