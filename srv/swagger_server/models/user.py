# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, username: str=None, email: str=None, email_verified: bool=None, create_date: date=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: int
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param email_verified: The email_verified of this User.  # noqa: E501
        :type email_verified: bool
        :param create_date: The create_date of this User.  # noqa: E501
        :type create_date: date
        """
        self.swagger_types = {
            'id': int,
            'username': str,
            'email': str,
            'email_verified': bool,
            'create_date': date
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'email': 'email',
            'email_verified': 'emailVerified',
            'create_date': 'createDate'
        }
        self._id = id
        self._username = username
        self._email = email
        self._email_verified = email_verified
        self._create_date = create_date

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this User.

        Unique identifier for the given user.  # noqa: E501

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this User.

        Unique identifier for the given user.  # noqa: E501

        :param id: The id of this User.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this User.

        The username of the user  # noqa: E501

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.

        The username of the user  # noqa: E501

        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def email_verified(self) -> bool:
        """Gets the email_verified of this User.

        Set to true if the user's email has been verified.  # noqa: E501

        :return: The email_verified of this User.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified: bool):
        """Sets the email_verified of this User.

        Set to true if the user's email has been verified.  # noqa: E501

        :param email_verified: The email_verified of this User.
        :type email_verified: bool
        """
        if email_verified is None:
            raise ValueError("Invalid value for `email_verified`, must not be `None`")  # noqa: E501

        self._email_verified = email_verified

    @property
    def create_date(self) -> date:
        """Gets the create_date of this User.

        The date that the user was created.  # noqa: E501

        :return: The create_date of this User.
        :rtype: date
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date: date):
        """Sets the create_date of this User.

        The date that the user was created.  # noqa: E501

        :param create_date: The create_date of this User.
        :type create_date: date
        """

        self._create_date = create_date
