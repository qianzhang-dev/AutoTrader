# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, username: str=None, email: str=None, email_verified: bool=None, created_date: datetime=None, last_logged_in_date: datetime=None):  # noqa: E501
        """UserResponse - a model defined in Swagger

        :param id: The id of this UserResponse.  # noqa: E501
        :type id: int
        :param username: The username of this UserResponse.  # noqa: E501
        :type username: str
        :param email: The email of this UserResponse.  # noqa: E501
        :type email: str
        :param email_verified: The email_verified of this UserResponse.  # noqa: E501
        :type email_verified: bool
        :param created_date: The created_date of this UserResponse.  # noqa: E501
        :type created_date: datetime
        :param last_logged_in_date: The last_logged_in_date of this UserResponse.  # noqa: E501
        :type last_logged_in_date: datetime
        """
        self.swagger_types = {
            'id': int,
            'username': str,
            'email': str,
            'email_verified': bool,
            'created_date': datetime,
            'last_logged_in_date': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'email': 'email',
            'email_verified': 'emailVerified',
            'created_date': 'createdDate',
            'last_logged_in_date': 'lastLoggedInDate'
        }
        self._id = id
        self._username = username
        self._email = email
        self._email_verified = email_verified
        self._created_date = created_date
        self._last_logged_in_date = last_logged_in_date

    @classmethod
    def from_dict(cls, dikt) -> 'UserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserResponse of this UserResponse.  # noqa: E501
        :rtype: UserResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this UserResponse.

        Unique identifier for the given user.  # noqa: E501

        :return: The id of this UserResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UserResponse.

        Unique identifier for the given user.  # noqa: E501

        :param id: The id of this UserResponse.
        :type id: int
        """

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this UserResponse.

        The username of the user  # noqa: E501

        :return: The username of this UserResponse.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UserResponse.

        The username of the user  # noqa: E501

        :param username: The username of this UserResponse.
        :type username: str
        """

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this UserResponse.


        :return: The email of this UserResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this UserResponse.


        :param email: The email of this UserResponse.
        :type email: str
        """

        self._email = email

    @property
    def email_verified(self) -> bool:
        """Gets the email_verified of this UserResponse.

        Set to true if the user's email has been verified.  # noqa: E501

        :return: The email_verified of this UserResponse.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified: bool):
        """Sets the email_verified of this UserResponse.

        Set to true if the user's email has been verified.  # noqa: E501

        :param email_verified: The email_verified of this UserResponse.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def created_date(self) -> datetime:
        """Gets the created_date of this UserResponse.

        The date that the user was created.  # noqa: E501

        :return: The created_date of this UserResponse.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date: datetime):
        """Sets the created_date of this UserResponse.

        The date that the user was created.  # noqa: E501

        :param created_date: The created_date of this UserResponse.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def last_logged_in_date(self) -> datetime:
        """Gets the last_logged_in_date of this UserResponse.


        :return: The last_logged_in_date of this UserResponse.
        :rtype: datetime
        """
        return self._last_logged_in_date

    @last_logged_in_date.setter
    def last_logged_in_date(self, last_logged_in_date: datetime):
        """Sets the last_logged_in_date of this UserResponse.


        :param last_logged_in_date: The last_logged_in_date of this UserResponse.
        :type last_logged_in_date: datetime
        """

        self._last_logged_in_date = last_logged_in_date
