# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MonitorRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ticker: str=None, event_type: str=None):  # noqa: E501
        """MonitorRequest - a model defined in Swagger

        :param ticker: The ticker of this MonitorRequest.  # noqa: E501
        :type ticker: str
        :param event_type: The event_type of this MonitorRequest.  # noqa: E501
        :type event_type: str
        """
        self.swagger_types = {
            'ticker': str,
            'event_type': str
        }

        self.attribute_map = {
            'ticker': 'ticker',
            'event_type': 'eventType'
        }
        self._ticker = ticker
        self._event_type = event_type

    @classmethod
    def from_dict(cls, dikt) -> 'MonitorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MonitorRequest of this MonitorRequest.  # noqa: E501
        :rtype: MonitorRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ticker(self) -> str:
        """Gets the ticker of this MonitorRequest.


        :return: The ticker of this MonitorRequest.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: str):
        """Sets the ticker of this MonitorRequest.


        :param ticker: The ticker of this MonitorRequest.
        :type ticker: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def event_type(self) -> str:
        """Gets the event_type of this MonitorRequest.


        :return: The event_type of this MonitorRequest.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this MonitorRequest.


        :param event_type: The event_type of this MonitorRequest.
        :type event_type: str
        """
        allowed_values = ["downCross50MA", "upCross50MA", "downCross100MA", "upCross100MA", "downCross10MA", "upCross10MA", "downCross200MA", "upCross200MA"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type
