# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AlertResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, event_type: str=None, ticker: str=None, disabled: bool=None, created_time: datetime=None, last_triggered_time: datetime=None, owner_id: int=None, price: float=None):  # noqa: E501
        """AlertResponse - a model defined in Swagger

        :param id: The id of this AlertResponse.  # noqa: E501
        :type id: int
        :param event_type: The event_type of this AlertResponse.  # noqa: E501
        :type event_type: str
        :param ticker: The ticker of this AlertResponse.  # noqa: E501
        :type ticker: str
        :param disabled: The disabled of this AlertResponse.  # noqa: E501
        :type disabled: bool
        :param created_time: The created_time of this AlertResponse.  # noqa: E501
        :type created_time: datetime
        :param last_triggered_time: The last_triggered_time of this AlertResponse.  # noqa: E501
        :type last_triggered_time: datetime
        :param owner_id: The owner_id of this AlertResponse.  # noqa: E501
        :type owner_id: int
        :param price: The price of this AlertResponse.  # noqa: E501
        :type price: float
        """
        self.swagger_types = {
            'id': int,
            'event_type': str,
            'ticker': str,
            'disabled': bool,
            'created_time': datetime,
            'last_triggered_time': datetime,
            'owner_id': int,
            'price': float
        }

        self.attribute_map = {
            'id': 'id',
            'event_type': 'eventType',
            'ticker': 'ticker',
            'disabled': 'disabled',
            'created_time': 'createdTime',
            'last_triggered_time': 'lastTriggeredTime',
            'owner_id': 'ownerId',
            'price': 'price'
        }
        self._id = id
        self._event_type = event_type
        self._ticker = ticker
        self._disabled = disabled
        self._created_time = created_time
        self._last_triggered_time = last_triggered_time
        self._owner_id = owner_id
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'AlertResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlertResponse of this AlertResponse.  # noqa: E501
        :rtype: AlertResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this AlertResponse.


        :return: The id of this AlertResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this AlertResponse.


        :param id: The id of this AlertResponse.
        :type id: int
        """

        self._id = id

    @property
    def event_type(self) -> str:
        """Gets the event_type of this AlertResponse.


        :return: The event_type of this AlertResponse.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this AlertResponse.


        :param event_type: The event_type of this AlertResponse.
        :type event_type: str
        """
        allowed_values = ["upCross", "downCross"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def ticker(self) -> str:
        """Gets the ticker of this AlertResponse.


        :return: The ticker of this AlertResponse.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: str):
        """Sets the ticker of this AlertResponse.


        :param ticker: The ticker of this AlertResponse.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def disabled(self) -> bool:
        """Gets the disabled of this AlertResponse.


        :return: The disabled of this AlertResponse.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled: bool):
        """Sets the disabled of this AlertResponse.


        :param disabled: The disabled of this AlertResponse.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def created_time(self) -> datetime:
        """Gets the created_time of this AlertResponse.


        :return: The created_time of this AlertResponse.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time: datetime):
        """Sets the created_time of this AlertResponse.


        :param created_time: The created_time of this AlertResponse.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def last_triggered_time(self) -> datetime:
        """Gets the last_triggered_time of this AlertResponse.


        :return: The last_triggered_time of this AlertResponse.
        :rtype: datetime
        """
        return self._last_triggered_time

    @last_triggered_time.setter
    def last_triggered_time(self, last_triggered_time: datetime):
        """Sets the last_triggered_time of this AlertResponse.


        :param last_triggered_time: The last_triggered_time of this AlertResponse.
        :type last_triggered_time: datetime
        """

        self._last_triggered_time = last_triggered_time

    @property
    def owner_id(self) -> int:
        """Gets the owner_id of this AlertResponse.


        :return: The owner_id of this AlertResponse.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: int):
        """Sets the owner_id of this AlertResponse.


        :param owner_id: The owner_id of this AlertResponse.
        :type owner_id: int
        """

        self._owner_id = owner_id

    @property
    def price(self) -> float:
        """Gets the price of this AlertResponse.


        :return: The price of this AlertResponse.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this AlertResponse.


        :param price: The price of this AlertResponse.
        :type price: float
        """

        self._price = price
