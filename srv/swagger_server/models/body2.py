# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body2(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ticker: str=None, event_type: str=None, price: float=None):  # noqa: E501
        """Body2 - a model defined in Swagger

        :param ticker: The ticker of this Body2.  # noqa: E501
        :type ticker: str
        :param event_type: The event_type of this Body2.  # noqa: E501
        :type event_type: str
        :param price: The price of this Body2.  # noqa: E501
        :type price: float
        """
        self.swagger_types = {
            'ticker': str,
            'event_type': str,
            'price': float
        }

        self.attribute_map = {
            'ticker': 'ticker',
            'event_type': 'eventType',
            'price': 'price'
        }
        self._ticker = ticker
        self._event_type = event_type
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'Body2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body_2 of this Body2.  # noqa: E501
        :rtype: Body2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ticker(self) -> str:
        """Gets the ticker of this Body2.


        :return: The ticker of this Body2.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: str):
        """Sets the ticker of this Body2.


        :param ticker: The ticker of this Body2.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def event_type(self) -> str:
        """Gets the event_type of this Body2.


        :return: The event_type of this Body2.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this Body2.


        :param event_type: The event_type of this Body2.
        :type event_type: str
        """
        allowed_values = ["upCross", "downCross"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def price(self) -> float:
        """Gets the price of this Body2.


        :return: The price of this Body2.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Body2.


        :param price: The price of this Body2.
        :type price: float
        """

        self._price = price
