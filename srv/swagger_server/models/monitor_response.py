# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MonitorResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, event_type: str=None, ticker: str=None, created_date: datetime=None, last_triggered_date: datetime=None):  # noqa: E501
        """MonitorResponse - a model defined in Swagger

        :param id: The id of this MonitorResponse.  # noqa: E501
        :type id: str
        :param event_type: The event_type of this MonitorResponse.  # noqa: E501
        :type event_type: str
        :param ticker: The ticker of this MonitorResponse.  # noqa: E501
        :type ticker: str
        :param created_date: The created_date of this MonitorResponse.  # noqa: E501
        :type created_date: datetime
        :param last_triggered_date: The last_triggered_date of this MonitorResponse.  # noqa: E501
        :type last_triggered_date: datetime
        """
        self.swagger_types = {
            'id': str,
            'event_type': str,
            'ticker': str,
            'created_date': datetime,
            'last_triggered_date': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'event_type': 'eventType',
            'ticker': 'ticker',
            'created_date': 'createdDate',
            'last_triggered_date': 'lastTriggeredDate'
        }
        self._id = id
        self._event_type = event_type
        self._ticker = ticker
        self._created_date = created_date
        self._last_triggered_date = last_triggered_date

    @classmethod
    def from_dict(cls, dikt) -> 'MonitorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MonitorResponse of this MonitorResponse.  # noqa: E501
        :rtype: MonitorResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this MonitorResponse.


        :return: The id of this MonitorResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MonitorResponse.


        :param id: The id of this MonitorResponse.
        :type id: str
        """

        self._id = id

    @property
    def event_type(self) -> str:
        """Gets the event_type of this MonitorResponse.


        :return: The event_type of this MonitorResponse.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this MonitorResponse.


        :param event_type: The event_type of this MonitorResponse.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def ticker(self) -> str:
        """Gets the ticker of this MonitorResponse.


        :return: The ticker of this MonitorResponse.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: str):
        """Sets the ticker of this MonitorResponse.


        :param ticker: The ticker of this MonitorResponse.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def created_date(self) -> datetime:
        """Gets the created_date of this MonitorResponse.


        :return: The created_date of this MonitorResponse.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date: datetime):
        """Sets the created_date of this MonitorResponse.


        :param created_date: The created_date of this MonitorResponse.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def last_triggered_date(self) -> datetime:
        """Gets the last_triggered_date of this MonitorResponse.


        :return: The last_triggered_date of this MonitorResponse.
        :rtype: datetime
        """
        return self._last_triggered_date

    @last_triggered_date.setter
    def last_triggered_date(self, last_triggered_date: datetime):
        """Sets the last_triggered_date of this MonitorResponse.


        :param last_triggered_date: The last_triggered_date of this MonitorResponse.
        :type last_triggered_date: datetime
        """

        self._last_triggered_date = last_triggered_date
