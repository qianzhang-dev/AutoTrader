# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StockInfoShort(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, market_code: str=None, name: str=None, description: str=None, sector: str=None, currency: str=None, ticker: str=None):  # noqa: E501
        """StockInfoShort - a model defined in Swagger

        :param id: The id of this StockInfoShort.  # noqa: E501
        :type id: int
        :param market_code: The market_code of this StockInfoShort.  # noqa: E501
        :type market_code: str
        :param name: The name of this StockInfoShort.  # noqa: E501
        :type name: str
        :param description: The description of this StockInfoShort.  # noqa: E501
        :type description: str
        :param sector: The sector of this StockInfoShort.  # noqa: E501
        :type sector: str
        :param currency: The currency of this StockInfoShort.  # noqa: E501
        :type currency: str
        :param ticker: The ticker of this StockInfoShort.  # noqa: E501
        :type ticker: str
        """
        self.swagger_types = {
            'id': int,
            'market_code': str,
            'name': str,
            'description': str,
            'sector': str,
            'currency': str,
            'ticker': str
        }

        self.attribute_map = {
            'id': 'id',
            'market_code': 'marketCode',
            'name': 'name',
            'description': 'description',
            'sector': 'sector',
            'currency': 'currency',
            'ticker': 'ticker'
        }
        self._id = id
        self._market_code = market_code
        self._name = name
        self._description = description
        self._sector = sector
        self._currency = currency
        self._ticker = ticker

    @classmethod
    def from_dict(cls, dikt) -> 'StockInfoShort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StockInfoShort of this StockInfoShort.  # noqa: E501
        :rtype: StockInfoShort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this StockInfoShort.


        :return: The id of this StockInfoShort.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this StockInfoShort.


        :param id: The id of this StockInfoShort.
        :type id: int
        """

        self._id = id

    @property
    def market_code(self) -> str:
        """Gets the market_code of this StockInfoShort.


        :return: The market_code of this StockInfoShort.
        :rtype: str
        """
        return self._market_code

    @market_code.setter
    def market_code(self, market_code: str):
        """Sets the market_code of this StockInfoShort.


        :param market_code: The market_code of this StockInfoShort.
        :type market_code: str
        """

        self._market_code = market_code

    @property
    def name(self) -> str:
        """Gets the name of this StockInfoShort.


        :return: The name of this StockInfoShort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this StockInfoShort.


        :param name: The name of this StockInfoShort.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this StockInfoShort.


        :return: The description of this StockInfoShort.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this StockInfoShort.


        :param description: The description of this StockInfoShort.
        :type description: str
        """

        self._description = description

    @property
    def sector(self) -> str:
        """Gets the sector of this StockInfoShort.


        :return: The sector of this StockInfoShort.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector: str):
        """Sets the sector of this StockInfoShort.


        :param sector: The sector of this StockInfoShort.
        :type sector: str
        """

        self._sector = sector

    @property
    def currency(self) -> str:
        """Gets the currency of this StockInfoShort.


        :return: The currency of this StockInfoShort.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this StockInfoShort.


        :param currency: The currency of this StockInfoShort.
        :type currency: str
        """

        self._currency = currency

    @property
    def ticker(self) -> str:
        """Gets the ticker of this StockInfoShort.


        :return: The ticker of this StockInfoShort.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: str):
        """Sets the ticker of this StockInfoShort.


        :param ticker: The ticker of this StockInfoShort.
        :type ticker: str
        """

        self._ticker = ticker
