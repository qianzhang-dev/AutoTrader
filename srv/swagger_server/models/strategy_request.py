# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StrategyRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, strategy_name: str=None, owner_id: int=None, strategy_type: str=None, is_completed: bool=None, ticker: str=None, term: str=None, sector: str=None, goal_summary: str=None, target_prices: List[float]=None, stop_loss_prices: List[float]=None, cost_basis: float=None, quantity: int=None, total_return: float=None, dividend_return: float=None):  # noqa: E501
        """StrategyRequest - a model defined in Swagger

        :param id: The id of this StrategyRequest.  # noqa: E501
        :type id: int
        :param strategy_name: The strategy_name of this StrategyRequest.  # noqa: E501
        :type strategy_name: str
        :param owner_id: The owner_id of this StrategyRequest.  # noqa: E501
        :type owner_id: int
        :param strategy_type: The strategy_type of this StrategyRequest.  # noqa: E501
        :type strategy_type: str
        :param is_completed: The is_completed of this StrategyRequest.  # noqa: E501
        :type is_completed: bool
        :param ticker: The ticker of this StrategyRequest.  # noqa: E501
        :type ticker: str
        :param term: The term of this StrategyRequest.  # noqa: E501
        :type term: str
        :param sector: The sector of this StrategyRequest.  # noqa: E501
        :type sector: str
        :param goal_summary: The goal_summary of this StrategyRequest.  # noqa: E501
        :type goal_summary: str
        :param target_prices: The target_prices of this StrategyRequest.  # noqa: E501
        :type target_prices: List[float]
        :param stop_loss_prices: The stop_loss_prices of this StrategyRequest.  # noqa: E501
        :type stop_loss_prices: List[float]
        :param cost_basis: The cost_basis of this StrategyRequest.  # noqa: E501
        :type cost_basis: float
        :param quantity: The quantity of this StrategyRequest.  # noqa: E501
        :type quantity: int
        :param total_return: The total_return of this StrategyRequest.  # noqa: E501
        :type total_return: float
        :param dividend_return: The dividend_return of this StrategyRequest.  # noqa: E501
        :type dividend_return: float
        """
        self.swagger_types = {
            'id': int,
            'strategy_name': str,
            'owner_id': int,
            'strategy_type': str,
            'is_completed': bool,
            'ticker': str,
            'term': str,
            'sector': str,
            'goal_summary': str,
            'target_prices': List[float],
            'stop_loss_prices': List[float],
            'cost_basis': float,
            'quantity': int,
            'total_return': float,
            'dividend_return': float
        }

        self.attribute_map = {
            'id': 'id',
            'strategy_name': 'strategy_name',
            'owner_id': 'owner_id',
            'strategy_type': 'strategy_type',
            'is_completed': 'is_completed',
            'ticker': 'ticker',
            'term': 'term',
            'sector': 'sector',
            'goal_summary': 'goal_summary',
            'target_prices': 'target_prices',
            'stop_loss_prices': 'stop_loss_prices',
            'cost_basis': 'cost_basis',
            'quantity': 'quantity',
            'total_return': 'total_return',
            'dividend_return': 'dividend_return'
        }
        self._id = id
        self._strategy_name = strategy_name
        self._owner_id = owner_id
        self._strategy_type = strategy_type
        self._is_completed = is_completed
        self._ticker = ticker
        self._term = term
        self._sector = sector
        self._goal_summary = goal_summary
        self._target_prices = target_prices
        self._stop_loss_prices = stop_loss_prices
        self._cost_basis = cost_basis
        self._quantity = quantity
        self._total_return = total_return
        self._dividend_return = dividend_return

    @classmethod
    def from_dict(cls, dikt) -> 'StrategyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StrategyRequest of this StrategyRequest.  # noqa: E501
        :rtype: StrategyRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this StrategyRequest.


        :return: The id of this StrategyRequest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this StrategyRequest.


        :param id: The id of this StrategyRequest.
        :type id: int
        """

        self._id = id

    @property
    def strategy_name(self) -> str:
        """Gets the strategy_name of this StrategyRequest.


        :return: The strategy_name of this StrategyRequest.
        :rtype: str
        """
        return self._strategy_name

    @strategy_name.setter
    def strategy_name(self, strategy_name: str):
        """Sets the strategy_name of this StrategyRequest.


        :param strategy_name: The strategy_name of this StrategyRequest.
        :type strategy_name: str
        """
        if strategy_name is None:
            raise ValueError("Invalid value for `strategy_name`, must not be `None`")  # noqa: E501

        self._strategy_name = strategy_name

    @property
    def owner_id(self) -> int:
        """Gets the owner_id of this StrategyRequest.


        :return: The owner_id of this StrategyRequest.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: int):
        """Sets the owner_id of this StrategyRequest.


        :param owner_id: The owner_id of this StrategyRequest.
        :type owner_id: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def strategy_type(self) -> str:
        """Gets the strategy_type of this StrategyRequest.


        :return: The strategy_type of this StrategyRequest.
        :rtype: str
        """
        return self._strategy_type

    @strategy_type.setter
    def strategy_type(self, strategy_type: str):
        """Sets the strategy_type of this StrategyRequest.


        :param strategy_type: The strategy_type of this StrategyRequest.
        :type strategy_type: str
        """
        if strategy_type is None:
            raise ValueError("Invalid value for `strategy_type`, must not be `None`")  # noqa: E501

        self._strategy_type = strategy_type

    @property
    def is_completed(self) -> bool:
        """Gets the is_completed of this StrategyRequest.


        :return: The is_completed of this StrategyRequest.
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed: bool):
        """Sets the is_completed of this StrategyRequest.


        :param is_completed: The is_completed of this StrategyRequest.
        :type is_completed: bool
        """
        if is_completed is None:
            raise ValueError("Invalid value for `is_completed`, must not be `None`")  # noqa: E501

        self._is_completed = is_completed

    @property
    def ticker(self) -> str:
        """Gets the ticker of this StrategyRequest.


        :return: The ticker of this StrategyRequest.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: str):
        """Sets the ticker of this StrategyRequest.


        :param ticker: The ticker of this StrategyRequest.
        :type ticker: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def term(self) -> str:
        """Gets the term of this StrategyRequest.


        :return: The term of this StrategyRequest.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term: str):
        """Sets the term of this StrategyRequest.


        :param term: The term of this StrategyRequest.
        :type term: str
        """
        if term is None:
            raise ValueError("Invalid value for `term`, must not be `None`")  # noqa: E501

        self._term = term

    @property
    def sector(self) -> str:
        """Gets the sector of this StrategyRequest.


        :return: The sector of this StrategyRequest.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector: str):
        """Sets the sector of this StrategyRequest.


        :param sector: The sector of this StrategyRequest.
        :type sector: str
        """
        if sector is None:
            raise ValueError("Invalid value for `sector`, must not be `None`")  # noqa: E501

        self._sector = sector

    @property
    def goal_summary(self) -> str:
        """Gets the goal_summary of this StrategyRequest.


        :return: The goal_summary of this StrategyRequest.
        :rtype: str
        """
        return self._goal_summary

    @goal_summary.setter
    def goal_summary(self, goal_summary: str):
        """Sets the goal_summary of this StrategyRequest.


        :param goal_summary: The goal_summary of this StrategyRequest.
        :type goal_summary: str
        """

        self._goal_summary = goal_summary

    @property
    def target_prices(self) -> List[float]:
        """Gets the target_prices of this StrategyRequest.


        :return: The target_prices of this StrategyRequest.
        :rtype: List[float]
        """
        return self._target_prices

    @target_prices.setter
    def target_prices(self, target_prices: List[float]):
        """Sets the target_prices of this StrategyRequest.


        :param target_prices: The target_prices of this StrategyRequest.
        :type target_prices: List[float]
        """

        self._target_prices = target_prices

    @property
    def stop_loss_prices(self) -> List[float]:
        """Gets the stop_loss_prices of this StrategyRequest.


        :return: The stop_loss_prices of this StrategyRequest.
        :rtype: List[float]
        """
        return self._stop_loss_prices

    @stop_loss_prices.setter
    def stop_loss_prices(self, stop_loss_prices: List[float]):
        """Sets the stop_loss_prices of this StrategyRequest.


        :param stop_loss_prices: The stop_loss_prices of this StrategyRequest.
        :type stop_loss_prices: List[float]
        """

        self._stop_loss_prices = stop_loss_prices

    @property
    def cost_basis(self) -> float:
        """Gets the cost_basis of this StrategyRequest.


        :return: The cost_basis of this StrategyRequest.
        :rtype: float
        """
        return self._cost_basis

    @cost_basis.setter
    def cost_basis(self, cost_basis: float):
        """Sets the cost_basis of this StrategyRequest.


        :param cost_basis: The cost_basis of this StrategyRequest.
        :type cost_basis: float
        """

        self._cost_basis = cost_basis

    @property
    def quantity(self) -> int:
        """Gets the quantity of this StrategyRequest.


        :return: The quantity of this StrategyRequest.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this StrategyRequest.


        :param quantity: The quantity of this StrategyRequest.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def total_return(self) -> float:
        """Gets the total_return of this StrategyRequest.


        :return: The total_return of this StrategyRequest.
        :rtype: float
        """
        return self._total_return

    @total_return.setter
    def total_return(self, total_return: float):
        """Sets the total_return of this StrategyRequest.


        :param total_return: The total_return of this StrategyRequest.
        :type total_return: float
        """

        self._total_return = total_return

    @property
    def dividend_return(self) -> float:
        """Gets the dividend_return of this StrategyRequest.


        :return: The dividend_return of this StrategyRequest.
        :rtype: float
        """
        return self._dividend_return

    @dividend_return.setter
    def dividend_return(self, dividend_return: float):
        """Sets the dividend_return of this StrategyRequest.


        :param dividend_return: The dividend_return of this StrategyRequest.
        :type dividend_return: float
        """

        self._dividend_return = dividend_return
