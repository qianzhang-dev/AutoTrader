# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StrategyActivityRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, strategy_id: int=None, operator: str=None, comment: str=None, price: float=None, quantity: int=None, target_prices: List[float]=None, stop_loss_prices: List[float]=None):  # noqa: E501
        """StrategyActivityRequest - a model defined in Swagger

        :param id: The id of this StrategyActivityRequest.  # noqa: E501
        :type id: int
        :param strategy_id: The strategy_id of this StrategyActivityRequest.  # noqa: E501
        :type strategy_id: int
        :param operator: The operator of this StrategyActivityRequest.  # noqa: E501
        :type operator: str
        :param comment: The comment of this StrategyActivityRequest.  # noqa: E501
        :type comment: str
        :param price: The price of this StrategyActivityRequest.  # noqa: E501
        :type price: float
        :param quantity: The quantity of this StrategyActivityRequest.  # noqa: E501
        :type quantity: int
        :param target_prices: The target_prices of this StrategyActivityRequest.  # noqa: E501
        :type target_prices: List[float]
        :param stop_loss_prices: The stop_loss_prices of this StrategyActivityRequest.  # noqa: E501
        :type stop_loss_prices: List[float]
        """
        self.swagger_types = {
            'id': int,
            'strategy_id': int,
            'operator': str,
            'comment': str,
            'price': float,
            'quantity': int,
            'target_prices': List[float],
            'stop_loss_prices': List[float]
        }

        self.attribute_map = {
            'id': 'id',
            'strategy_id': 'strategy_id',
            'operator': 'operator',
            'comment': 'comment',
            'price': 'price',
            'quantity': 'quantity',
            'target_prices': 'target_prices',
            'stop_loss_prices': 'stop_loss_prices'
        }
        self._id = id
        self._strategy_id = strategy_id
        self._operator = operator
        self._comment = comment
        self._price = price
        self._quantity = quantity
        self._target_prices = target_prices
        self._stop_loss_prices = stop_loss_prices

    @classmethod
    def from_dict(cls, dikt) -> 'StrategyActivityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StrategyActivityRequest of this StrategyActivityRequest.  # noqa: E501
        :rtype: StrategyActivityRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this StrategyActivityRequest.


        :return: The id of this StrategyActivityRequest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this StrategyActivityRequest.


        :param id: The id of this StrategyActivityRequest.
        :type id: int
        """

        self._id = id

    @property
    def strategy_id(self) -> int:
        """Gets the strategy_id of this StrategyActivityRequest.


        :return: The strategy_id of this StrategyActivityRequest.
        :rtype: int
        """
        return self._strategy_id

    @strategy_id.setter
    def strategy_id(self, strategy_id: int):
        """Sets the strategy_id of this StrategyActivityRequest.


        :param strategy_id: The strategy_id of this StrategyActivityRequest.
        :type strategy_id: int
        """
        if strategy_id is None:
            raise ValueError("Invalid value for `strategy_id`, must not be `None`")  # noqa: E501

        self._strategy_id = strategy_id

    @property
    def operator(self) -> str:
        """Gets the operator of this StrategyActivityRequest.


        :return: The operator of this StrategyActivityRequest.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this StrategyActivityRequest.


        :param operator: The operator of this StrategyActivityRequest.
        :type operator: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def comment(self) -> str:
        """Gets the comment of this StrategyActivityRequest.


        :return: The comment of this StrategyActivityRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this StrategyActivityRequest.


        :param comment: The comment of this StrategyActivityRequest.
        :type comment: str
        """

        self._comment = comment

    @property
    def price(self) -> float:
        """Gets the price of this StrategyActivityRequest.


        :return: The price of this StrategyActivityRequest.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this StrategyActivityRequest.


        :param price: The price of this StrategyActivityRequest.
        :type price: float
        """

        self._price = price

    @property
    def quantity(self) -> int:
        """Gets the quantity of this StrategyActivityRequest.


        :return: The quantity of this StrategyActivityRequest.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this StrategyActivityRequest.


        :param quantity: The quantity of this StrategyActivityRequest.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def target_prices(self) -> List[float]:
        """Gets the target_prices of this StrategyActivityRequest.


        :return: The target_prices of this StrategyActivityRequest.
        :rtype: List[float]
        """
        return self._target_prices

    @target_prices.setter
    def target_prices(self, target_prices: List[float]):
        """Sets the target_prices of this StrategyActivityRequest.


        :param target_prices: The target_prices of this StrategyActivityRequest.
        :type target_prices: List[float]
        """

        self._target_prices = target_prices

    @property
    def stop_loss_prices(self) -> List[float]:
        """Gets the stop_loss_prices of this StrategyActivityRequest.


        :return: The stop_loss_prices of this StrategyActivityRequest.
        :rtype: List[float]
        """
        return self._stop_loss_prices

    @stop_loss_prices.setter
    def stop_loss_prices(self, stop_loss_prices: List[float]):
        """Sets the stop_loss_prices of this StrategyActivityRequest.


        :param stop_loss_prices: The stop_loss_prices of this StrategyActivityRequest.
        :type stop_loss_prices: List[float]
        """

        self._stop_loss_prices = stop_loss_prices
