openapi: 3.0.0
info:
  title: AutoTrader
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          headers: {}
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      parameters:
        - schema:
            type: string
          in: query
          name: key
          description: Your Api Key To Access This Site
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username that needs to be updated to
                password:
                  type: string
                  description: The new password that needs to be changed to
                  format: password
                email:
                  type: string
                  description: The new email address that needs to be changed to
                  format: email
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of this account
                password:
                  type: string
                  description: The password of this account
                  format: password
                email:
                  type: string
                  description: The email address to receive the ticker notification
                  format: email
              required:
                - username
                - password
                - email
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  '/users/{userId}/alerts':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
        '204':
          description: No Content
        '401':
          description: 'Unauthorized: Insufficient Permission To View This Alert List'
        '404':
          description: 'Not Found: Alert List Does Not Exist'
      operationId: get-users-userId-alerts
      description: Get a list of alert that the user owns
  '/users/{userId}/alerts/{ticker}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
      - schema:
          type: string
        name: ticker
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
        '401':
          description: 'Unauthorized: You Don''t Have Permission To View This Alert List'
        '404':
          description: 'Not Found: Alert List Does Not Exist'
      operationId: get-users-userId-alerts-ticker
      description: Get the alert of a specific ticker for a user
  '/users/{userId}/alert':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-users-userId-alert
      responses:
        '201':
          description: Created
        '400':
          description: 'Bad Request: Ticker Not Found'
        '401':
          description: 'Unauthorized: Insufficient Permission To Create Alert On This User Id'
        '409':
          description: 'Conflict: Alert Already Exist'
      description: Create a new alert for a specific ticker on a specific event
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ticker:
                  type: string
                eventType:
                  type: string
                  enum:
                    - upCross
                    - downCross
                price:
                  type: number
  '/users/{userId}/alerts/{ticker}/{alertId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
      - schema:
          type: string
        name: ticker
        in: path
        required: true
      - schema:
          type: string
        name: alertId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        '401':
          description: 'Unauthorized: Insufficient Permission To View This Alert'
        '404':
          description: 'Not Found: Alert Does Not Exist'
      operationId: get-users-userId-alerts-ticker-alertId
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          example: 1
        username:
          type: string
          description: The username of the user
          example: rogerxman
        email:
          type: string
          format: email
          example: roger@xman.com
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - username
        - email
        - emailVerified
    Alert:
      title: Alert
      type: object
      properties:
        id:
          type: integer
        eventType:
          type: string
          enum:
            - upCross
            - downCross
          example: upCross
        ticker:
          type: string
          example: MSFT
        disabled:
          type: boolean
        createTime:
          type: string
          format: date
        lastTriggerTime:
          type: string
          format: date
        ownerId:
          type: integer
        price:
          type: number
  securitySchemes: {}
